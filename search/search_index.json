{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ayaan's Blog","text":"<p>Welcome to my blog! Here I have some useful guides and blogs that you may find useful. </p> <ul> <li>Pi Guide: <ul> <li>Pi Guide - Imaging</li> <li>Pi Guide - USB Serial</li> <li>Pi Guide - Network &amp; Updating</li> <li>Pi Guide - Useful Commands</li> <li>Pi Guide - Motor Control</li> </ul> </li> </ul>"},{"location":"pi-guide/motors/","title":"Raspberry Pi Zero 2W Guide: Controlling the Motors","text":"<p>By Ayaan 3-10-25</p> <p>This guide goes into the steps needed to enable I2C to be able to control motors from the Raspberry Pi. </p>"},{"location":"pi-guide/motors/#1-pull-the-files-from-github","title":"1) Pull the files from GitHub","text":"<p>For our project, the files are located on GitHub at this link. </p> <p>Make sure Git is installed.</p> <pre><code>sudo apt update\nsudo apt install git -y\n</code></pre> <p>Navigate to the repository you want to clone the files to. Clone the Git repository. Here we will copy it to Desktop. </p> <pre><code>cd ~/Desktop\ngit clone https://github.com/hransom528/ECECapstoneProject.git\n</code></pre>"},{"location":"pi-guide/motors/#2-install-python-dependencies","title":"2) Install Python dependencies","text":"<p>Be sure that Python is installed with:</p> <pre><code>sudo apt install python3 python3-venv python3-pip -y\n</code></pre> <p>Check if Python is installed with:</p> <pre><code>python3 --version\n</code></pre> <p>We can create and then activate a virtual Python environment called <code>myvenv</code> to install our dependencies. </p> <pre><code>python3 -m venv myvenv\nsource myvenv/bin/activate\n</code></pre> <p>You should see a <code>(myenv)</code> at the beginning of your terminal. </p> <p>Now install the dependencies with: </p> <pre><code>sudo apt update &amp;&amp; sudo apt install python3-pip python3-smbus i2c-tools -y\npip3 install adafruit-blinka adafruit-circuitpython-motorkit\n</code></pre>"},{"location":"pi-guide/motors/#3-run-the-code","title":"3) Run the code","text":"<p>Navigate to the proper directory:</p> <pre><code>cd ECECapstoneProject\n</code></pre> <p>Now you can run the code! Let's run the <code>control_movement.py</code> in the <code>motor-control</code> directory: </p> <pre><code>python3 motor-control/control_movement.py\n</code></pre>"},{"location":"pi-guide/part1/","title":"Raspberry Pi Zero 2W Guide Part 1/3: Imaging","text":"<p>By Ayaan 2-24-25 Part 1/3</p> <p>This part goes into flashing the Kali Linux image with Raspberry Pi Imager on a Pi Zero 2W. </p>"},{"location":"pi-guide/part1/#1-download-kali-linux-from-the-right-place-do-not-download-the-pi-tail-version","title":"1) Download Kali Linux from the right place. Do not download the Pi-Tail version.","text":"<p>Download Kali Linux for Raspberry Pi</p>"},{"location":"pi-guide/part1/#2-download-raspberry-pi-imager","title":"2) Download Raspberry Pi Imager","text":"<p>Download Raspberry Pi Imager</p>"},{"location":"pi-guide/part1/#3-sd-card","title":"3) SD Card","text":"<p>Please ensure your SD card is at least 16 GB and is reasonably fast and recent. </p>"},{"location":"pi-guide/part1/#4-flashing","title":"4) Flashing","text":"<p>Please pick the right Raspberry Pi. In this case, we are using a Pi Zero 2W. Be sure to pick the right storage and right image. When asked to apply OS customization settings, set your Wifi &amp; region, and enable SSH. This saves a lot of time later. </p>"},{"location":"pi-guide/part1/#5-finishing-up","title":"5) Finishing Up","text":"<p>Once it is done writing, plug it into the Pi. Ideally you should have a USB keyboard and display. You're ready for the next steps!</p>"},{"location":"pi-guide/part2/","title":"Raspberry Pi Guide Part 2/3: USB Serial","text":"<p>By Ayaan 2-24-25 Part 2/3</p> <p>So you just got your Linux install. Now what?</p> <p>The goal of this step is to enable USB Serial, allowing direct communication between your PC and your Pi Zero 2W. You can then SSH into your Pi locally without any dependencies on Wifi. </p> <p>USB Serial Mode allows you to connect your pi directly to your computer using the second (data) MicroUSB port.  \"Regular\" Mode is the normal configuration where you can plug in a power source, keyboard, and HDMI and use your Pi as normal.  One limitation of USB Serial Mode is that you cannot plug in a keyboard and your computer at the same time since it uses the same physical port. You need either a USB to TTL adapter and use the pins or a USB OTG adapter. </p> <p>This guide is tailored for enabling USB Serial mode as an option to have. This guide will let you switch between USB Serial mode and Regular Mode. It may not suit your usecase. </p> <p>This was tested on Kali Linux, which is based on Debian. Since Raspbian is also based on Debian, it should also work there, but I have not tested it.  </p>"},{"location":"pi-guide/part2/#1-disable-gui","title":"1) Disable GUI","text":"<p>You can change this in <code>raspi-config</code></p> <pre><code>sudo systemctl set-default multi-user.target\nsudo reboot\n</code></pre> <p>To reenable GUI on boot, use raspi-config.</p> <p>To start the GUI in the CLI, run: </p> <pre><code>sudo startx &amp;\n</code></pre>"},{"location":"pi-guide/part2/#2-optional-disable-wait-for-network-on-boot","title":"2) (optional) Disable wait for network on boot","text":"<pre><code>sudo systemctl disable systemd-networkd-wait-online.service\nsudo reboot\n</code></pre>"},{"location":"pi-guide/part2/#3-enable-the-getty-communication-service-for-usb-serial","title":"3) Enable the getty communication service for USB serial:","text":"<pre><code>sudo systemctl restart serial-getty@ttyGS0.service\n</code></pre> <p>check if it is running with: </p> <pre><code>sudo systemctl status serial-getty@ttyGS0.service\n</code></pre> <p>It should say enabled in green. </p>"},{"location":"pi-guide/part2/#4-shut-down-the-pi-and-edit-your-cmdlinetxt","title":"4) Shut down the Pi and edit your <code>cmdline.txt</code>:","text":"<p>Change your <code>cmdline.txt</code> to this: </p> <pre><code>console=serial0,115200 console=tty1 root=PARTUUID=fc6ea92b-02 rootfstype=ext4 fsck.repair=yes rootwait modules-load=dwc2,g_serial net.ifnames=0 ds=nocloud cfg80211.ieee80211_regdom=US\n</code></pre>"},{"location":"pi-guide/part2/#5-edit-your-configtxt","title":"5) Edit your <code>config.txt</code>","text":"<p>Add this to the top or bottom of your <code>config.txt</code> and ideally remove the rest of the settings that you don't need. Make sure what you already have in your <code>config.txt</code> does not conflict with this!</p> <pre><code># SETTINGS FOR USB SERIAL OR REGULAR MODE\n# Please enable or disable the other to use a particular mode. \n\n# ENABLE FOR USB SERIAL\ndtoverlay=dwc2\nstart_x=1\n\n# ENABLE FOR REGULAR MODE\n# dr_mode=peripheral\n\n# Lower output resolution to 1/4th of 1080p\nframebuffer_width=960\nframebuffer_height=540\n\nhdmi_force_hotplug=1\ndisable_overscan=1\n</code></pre>"},{"location":"pi-guide/part2/#connecting-to-your-macbook","title":"Connecting to your Macbook","text":"<p>It is actually pretty straightforward on a Mac and a headache on Windows. </p>"},{"location":"pi-guide/part2/#1-plug-the-micro-usb-data-cable-to-the-second-micro-usb-port","title":"1) Plug the Micro USB data cable to the second Micro USB port.","text":"<p>Plug this into your Mac. Having a display is optional. </p>"},{"location":"pi-guide/part2/#2-run-the-following-command-on-your-computer-to-see-if-your-computer-recognizes-the-pi","title":"2) Run the following command on your computer to see if your computer recognizes the Pi:","text":"<pre><code>ls /dev/cu.usbmodem*\n</code></pre> <p>You should see something like this listed: </p> <pre><code>(base) qayyuma@Ayaans-MacBook-Pro ~ % ls /dev/cu.usbmodem*              \n\n/dev/cu.usbmodem11201\n</code></pre> <p>This Raspberry Pi is identified as <code>cu.usbmodem11201</code>. </p>"},{"location":"pi-guide/part2/#3-to-connect-to-your-pi-run-this-command","title":"3) To connect to your Pi, run this command.","text":"<p>Make sure to change the numbers to match yours.</p> <pre><code>screen /dev/cu.usbmodem2101 115200\n</code></pre> <p>Now it should ask you to connect. Type in <code>kali</code>, then <code>kali</code> as username and password. </p>"},{"location":"pi-guide/part2/#now-you-are-connected-to-your-pi-via-usb-serial","title":"Now you are connected to your Pi via USB Serial!","text":"<p>A major limitation is that you cannot directly control the Pi because the one data port is taken up. You need a USB OTG hub for this to work. In order to undo this and be able to run in \"normal\" mode where you can plug in the power to the power port and plug in a keyboard like normal, you must change your <code>config.txt</code> to match this snippet: </p> <p>USB Serial Mode: </p> <pre><code>## SETTINGS FOR USB SERIAL OR REGULAR MODE\n## Please enable or disable the other to use a particular mode. \n\n## ENABLE FOR USB SERIAL\ndtoverlay=dwc2\nstart_x=1\n\n## ENABLE FOR REGULAR MODE\n## dr_mode=peripheral\n</code></pre> <p>Regular Mode: </p> <pre><code>## SETTINGS FOR USB SERIAL OR REGULAR MODE\n## Please enable or disable the other to use a particular mode. \n\n## ENABLE FOR USB SERIAL\n## dtoverlay=dwc2\n## start_x=1\n\n## ENABLE FOR REGULAR MODE\ndr_mode=peripheral\n</code></pre> <p>USB Serial has an identical experience to SSHing over a network. However, there is significantly less lag and you have a lot more free memory. </p>"},{"location":"pi-guide/part2/#and-youre-done","title":"And you're done!","text":"<p>Now you have a Raspberry Pi that you can SSH into locally!</p>"},{"location":"pi-guide/part3/","title":"Raspberry Pi Guide Part 3/3","text":"<p>By Ayaan 2-24-25 Part 3/3</p> <p>The goal of this part is to connect to the network and update with all the latest packages on a Pi Zero 2W. </p>"},{"location":"pi-guide/part3/#1-set-up-a-2-gb-memory-swap-reserve","title":"1) Set up a 2 GB memory swap reserve","text":"<p>The goal of this step is to handle the fact that updating requires a lot of RAM which the Pi does not have. This may be optional, but skipping this step has more risks, so I wouldn't recommend it. </p> <pre><code>free -h &amp;&amp; \\\nsudo swapoff -a &amp;&amp; \\\nsudo fallocate -l 2G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=2048 &amp;&amp; \\\nsudo chmod 600 /swapfile &amp;&amp; \\\nsudo mkswap /swapfile &amp;&amp; \\\nsudo swapon /swapfile &amp;&amp; \\\necho '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab &amp;&amp; \\\necho 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf &amp;&amp; \\\nsudo sysctl -p &amp;&amp; \\\nfree -h\n</code></pre> <p>You should see 2 GB of swap memory listed. </p>"},{"location":"pi-guide/part3/#2-connect-to-wifi","title":"2) Connect to WiFi","text":"<p>If you already set your wifi while writing the image to the SD card in Part 1, you may already be connected to the internet. Check with this command: </p> <pre><code>ping 1.1.1.1\n</code></pre> <p>If it is pinging correctly, your Pi is connected. </p> <p>You can also check by checking the IP: </p> <pre><code>ifconfig\n</code></pre>"},{"location":"pi-guide/part3/#3-commands-to-install-essential-tools-and-update","title":"3) Commands to install essential tools and update","text":"<p>This command is going to take a while, so be patient. </p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt install -y aircrack-ng wireshark net-tools nmap\n</code></pre>"},{"location":"pi-guide/part3/#now-you-are-done","title":"Now you are done!","text":""},{"location":"pi-guide/useful_commands/","title":"Useful Commands","text":"<p>The following are some useful commands to use in Kali, Raspbian, and Debian.</p> Command Description Command See IP <code>ifconfig</code> Test WiFi <code>ping 1.1.1.1</code> Run the GUI (works while in SSH) <code>sudo startx &amp;</code> View Current RAM <code>free -h</code> View current files in directory (-h for human readable) <code>ls -h</code> View disk usage <code>df -h</code> Shut the system down <code>sudo poweroff</code> Adjust the base config <code>sudo nano /boot/config.txt</code> View current resolution <code>cat /sys/class/graphics/fb0/virtual_size</code> SSH into the Pi (without USB serial, need IP) <code>ssh kali@IP</code> Update package lists <code>sudo apt update</code> Upgrade installed packages <code>sudo apt upgrade</code> Install a package <code>sudo apt install &lt;package_name&gt;</code> Remove a package <code>sudo apt remove &lt;package_name&gt;</code> View CPU temperature <code>vcgencmd measure_temp</code> Check GPU memory usage <code>vcgencmd get_mem gpu</code> Check CPU info <code>cat /proc/cpuinfo</code> Check memory info <code>cat /proc/meminfo</code> Show running processes <code>htop</code> (install with <code>sudo apt install htop</code>) Show system resource usage <code>top</code> Check disk space usage <code>du -sh *</code> Reboot the system <code>sudo reboot</code> Edit network config <code>sudo nano /etc/dhcpcd.conf</code> Scan for available WiFi networks <code>sudo iwlist wlan0 scan</code> Connect to a WiFi network manually <code>sudo wpa_supplicant -B -i wlan0 -c &lt;(wpa_passphrase \"SSID\" \"PASSWORD\")</code> Enable VNC <code>sudo raspi-config</code> (navigate to Interface Options) List all USB devices <code>lsusb</code> List all PCI devices <code>lspci</code> Find system info <code>uname -a</code> Find OS version <code>cat /etc/os-release</code> Monitor system logs <code>tail -f /var/log/syslog</code> Check startup services <code>systemctl list-units --type=service</code> Enable a service to start on boot <code>sudo systemctl enable &lt;service_name&gt;</code> Disable a service from starting on boot <code>sudo systemctl disable &lt;service_name&gt;</code> Start a service manually <code>sudo systemctl start &lt;service_name&gt;</code> Stop a service manually <code>sudo systemctl stop &lt;service_name&gt;</code> Check the status of a service <code>sudo systemctl status &lt;service_name&gt;</code> Show IP routing table <code>ip route show</code> Show network interfaces <code>ip addr show</code> Find Raspberry Pi model info <code>cat /proc/device-tree/model</code>"}]}